# 11 
#include <iostream>
#include <string>

using namespace std;
struct sDate
{
    short Year;
    short Month;
    short Day;
};

int ReadYear()
{
    int Number;
    cout << "Enter Year Number ";
    cin >> Number;
    return Number;
}
int ReadMonth() {
    int Numb;
    cout << "Enter Month Of Year  ";
    cin >> Numb;
    return Numb;
}
int ReadDay() {
    int Num;
    cout << "Enter  Day Of Month  ";
    cin >> Num;
    return Num;
}
bool IsLeapYear(int year) {
    return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
}

int NumberOfDaysInMonth(int year, int month) {
    if (month == 2) 
        return IsLeapYear(year) ? 29 : 28;

    int longMonths[] = { 1, 3, 5, 7, 8, 10, 12 };

    for (int m : longMonths) {
        if (m == month) return 31;
    }
    return 30;
}
int NumberOfDaysFromTheBeginingOfTheYear(int Day, int Month, int Year) {
    int TotalDays = 0;
    for (int i = 1; i <= Month - 1; i++) {
        TotalDays += NumberOfDaysInMonth(Year, i);
    }
    TotalDays += Day;
    return TotalDays;
}
sDate GetDateFromDayOrderInYear(int DateOrderInYear, int Year)
{
    sDate Date;

    int RemainingDays = DateOrderInYear;

    int MonthDays = 0;

    Date.Year = Year;

    Date.Month = 1;

    while (true)
    {
        MonthDays = NumberOfDaysInMonth(Date.Month, Year);
        if (RemainingDays > MonthDays)
        {
            RemainingDays -= MonthDays;
            Date.Month++;
        }
        else
        {
            Date.Day = RemainingDays;
            break;
        }
    }
    return Date;
}

int main() {
    int Year = ReadYear();
    int month = ReadMonth();
    int day = ReadDay();
    int DayInYear = NumberOfDaysFromTheBeginingOfTheYear(day, month, Year);

    cout << "Number of Days from the begining of the year is " << NumberOfDaysFromTheBeginingOfTheYear(day, month, Year)<<endl;

    sDate Date;

    Date = GetDateFromDayOrderInYear(DayInYear, Year);
    cout << "Date for [" << DayInYear << "] is: ";

    cout << Date.Day << "/" << Date.Month << "/" << Date.Year;

    return 0;
}

---------------------------
# 12 
#include <iostream>
#include <string>

using namespace std;
struct sDate
{
    short Year;
    short Month;
    short Day;
};

int ReadYear()
{
    int Number;
    cout << "Enter Year Number ";
    cin >> Number;
    return Number;
}
int ReadMonth() {
    int Numb;
    cout << "Enter Month Of Year  ";
    cin >> Numb;
    return Numb;
}
int ReadDay() {
    int Num;
    cout << "Enter  Day Of Month  ";
    cin >> Num;
    return Num;
}
bool IsLeapYear(int year) {
    return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);
}

int NumberOfDaysInMonth(int year, int month) {
    if (month == 2) 
        return IsLeapYear(year) ? 29 : 28;

    int longMonths[] = { 1, 3, 5, 7, 8, 10, 12 };

    for (int m : longMonths) {
        if (m == month) return 31;
    }
    return 30;
}
int NumberOfDaysFromTheBeginingOfTheYear(int Day, int Month, int Year) {
    int TotalDays = 0;
    for (int i = 1; i <= Month - 1; i++) {
        TotalDays += NumberOfDaysInMonth(Year, i);
    }
    TotalDays += Day;
    return TotalDays;
}
sDate DateAddDays(int Days, sDate Date)
{
    int RemainingDays = Days + NumberOfDaysFromTheBeginingOfTheYear(Date.Day, Date.Month,Date.Year);

    int MonthDays = 0;

    Date.Month = 1;

    while (true)
    {
        MonthDays = NumberOfDaysInMonth(Date.Month, Date.Year);
        if (RemainingDays > MonthDays)
        {
            RemainingDays -= MonthDays;
            Date.Month++;
            if (Date.Month > 12)
            {
                Date.Month = 1;
                Date.Year++;
            }
        }
        else
        {
            Date.Day = RemainingDays;
            break;
        }
    }
    return Date;
}
sDate ReadFullDate()
{
    sDate Date;
    Date.Day = ReadDay();
    Date.Month = ReadMonth();
    Date.Year = ReadYear();
    return Date;
}
int ReadDaysToAdd()
{
    int Days;
    cout << "How many days to add ";
    cin >> Days;
    return Days;
}

int main() {
    sDate Date = ReadFullDate();
    int Day = ReadDaysToAdd();

    Date = DateAddDays(Day, Date);
    cout << "\nDate after adding [" << Day << "] days is: ";
    cout << Date.Day << "/" << Date.Month << "/" << Date.Year;

    return 0;
}
---------------------------------------------
# 13 
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
int ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
int ReadMonth()
{
	short Month;
	cout << "enter a Month ";
	cin >> Month;
	return Month;
}
int ReadYear()
{
	short Year;
	cout << "enter a Year ";
	cin >> Year;
	return Year;
}
bool IsDate1BeforeDate2(stDate Date1, stDate Date2)
{
	return (Date1.Year < Date2.Year) ? true : ((Date1.Year ==Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month ==Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}
int main()
{
	stDate Date1 = ReadFullDate();
	stDate Date2 = ReadFullDate();
	if (IsDate1BeforeDate2(Date1, Date2))

		cout << "\nYes Date1 is Less than Date2";
	else
		cout << "\nNo Date1 is NOT Less than Date2";


	return 0;
}
---------------------------------
# 14 .
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
int ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
int ReadMonth()
{
	short Month;
	cout << "enter a Month ";
	cin >> Month;
	return Month;
}
int ReadYear()
{
	short Year;
	cout << "enter a Year ";
	cin >> Year;
	return Year;
}
bool IsDate1EqualDate2(stDate Date1, stDate Date2)
{
	return (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;
}

stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}
int main()
{
	stDate Date1 = ReadFullDate();
	stDate Date2 = ReadFullDate();
	if (IsDate1EqualDate2(Date1, Date2))
		cout << "\nYes Date1 is Equal To Date2";
	else
		cout << "\nNo Date1 is NOT Equal To Date2";


	return 0;
}
------------------------------
# 15 
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
int ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
int ReadMonth()
{
	short Month;
	cout << "enter a Month ";
	cin >> Month;
	return Month;
}
int ReadYear()
{
	short Year;
	cout << "enter a Year ";
	cin >> Year;
	return Year;
}
bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month>12)
		return 0;

	int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) :days[Month - 1];
}

bool IsLastDayInMonth(stDate Date)
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month,Date.Year));
}

bool IsLastMonthInYear(short Month)
{
	return (Month == 12);
}
stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}
int main()
{
	stDate Date1 = ReadFullDate();
	
	if(IsLastDayInMonth(Date1))
		cout << "Yes Day is Last Day in Month"<<endl;

	else {
		cout << "No Day is Not Last Day in Month" << endl;
	}
if (IsLastMonthInYear(Date1.Month))
       cout << "Yes Month is Last Month in Year";
else {
	cout << "\nNo Month is Not Last Month in Year";

}
	return 0;
}
---------------------------
# 16
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
int ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
int ReadMonth()
{
	short Month;
	cout << "enter a Month ";
	cin >> Month;
	return Month;
}
int ReadYear()
{
	short Year;
	cout << "enter a Year ";
	cin >> Year;
	return Year;
}
bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month>12)
		return 0;

	int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) :days[Month - 1];
}

bool IsLastDayInMonth(stDate Date)
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month,Date.Year));
}

bool IsLastMonthInYear(short Month)
{
	return (Month == 12);
}
stDate IncreaseDateByOneDay(stDate Date)
{
	if (IsLastDayInMonth(Date))
	{
		if (IsLastMonthInYear(Date.Month))
		{
			Date.Month = 1;
			Date.Day = 1;
			Date.Year++;
		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}
	return Date;
}
stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}
int main()
{
	stDate Date1 = ReadFullDate();
	
	Date1 = IncreaseDateByOneDay(Date1);

	cout << "\nDate after adding one day is" << Date1.Day << "/" << Date1.Month << "/" << Date1.Year;

	return 0;
}
-------------------------------
# 17 
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
int ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
int ReadMonth()
{
	short Month;
	cout << "enter a Month ";
	cin >> Month;
	return Month;
}
int ReadYear()
{
	short Year;
	cout << "enter a Year ";
	cin >> Year;
	return Year;
}


bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}



bool IsDate1BeforeDate2(stDate Date1, stDate Date2)
{
	return (Date1.Year < Date2.Year) ? true : ((Date1.Year ==Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month ==Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}



short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month>12)
		return 0;

	int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) :days[Month - 1];
}

bool IsLastDayInMonth(stDate Date)
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month,Date.Year));
}

bool IsLastMonthInYear(short Month)
{
	return (Month == 12);
}



stDate IncreaseDateByOneDay(stDate Date)
{
	if (IsLastDayInMonth(Date))
	{
		if (IsLastMonthInYear(Date.Month))
		{
			Date.Month = 1;
			Date.Day = 1;
			Date.Year++;
		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}
	return Date;
}

int GetDifferenceInDays(stDate Date1, stDate Date2, bool
	IncludeEndDay = false)
{
	int Days = 0;
	while (IsDate1BeforeDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreaseDateByOneDay(Date1);
	}
	return IncludeEndDay ? ++Days : Days;
}

stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}


int main()
{
	stDate Date1 = ReadFullDate();
	stDate Date2 = ReadFullDate();
	cout << "Diffrence is: "<< GetDifferenceInDays(Date1, Date2) << " Day"<<endl;
	cout << "Diffrence (Including End Day) is: " << GetDifferenceInDays(Date1, Date2, true) << "Day" << endl;


	return 0;
}
----------------------------
# 18 
#pragma warning(disable : 4996)
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
int ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
int ReadMonth()
{
	short Month;
	cout << "enter a Month ";
	cin >> Month;
	return Month;
}
int ReadYear()
{
	short Year;
	cout << "enter a Year ";
	cin >> Year;
	return Year;
}


bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}



bool IsDate1BeforeDate2(stDate Date1, stDate Date2)
{
	return (Date1.Year < Date2.Year) ? true : ((Date1.Year ==Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month ==Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}



short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month>12)
		return 0;

	int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) :days[Month - 1];
}

bool IsLastDayInMonth(stDate Date)
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month,Date.Year));
}

bool IsLastMonthInYear(short Month)
{
	return (Month == 12);
}



stDate IncreaseDateByOneDay(stDate Date)
{
	if (IsLastDayInMonth(Date))
	{
		if (IsLastMonthInYear(Date.Month))
		{
			Date.Month = 1;
			Date.Day = 1;
			Date.Year++;
		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}
	return Date;
}

int GetDifferenceInDays(stDate Date1, stDate Date2, bool
	IncludeEndDay = false)
{
	int Days = 0;
	while (IsDate1BeforeDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreaseDateByOneDay(Date1);
	}
	return IncludeEndDay ? ++Days : Days;
}
stDate GetSystemDate()
{
	stDate Date;
	time_t t = time(0);
	tm* now = localtime(&t);
	Date.Year = now->tm_year + 1900;
	Date.Month = now->tm_mon + 1;
	Date.Day = now->tm_mday;
	return Date;
}

stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}


int main()
{
	cout << "enter Your Date of Birth"<<endl;

	stDate Date1 = ReadFullDate();

	stDate Date2 = GetSystemDate();

	cout << "ur Age is : " << GetDifferenceInDays(Date1, Date2, true) << " Day" << endl;

	return 0;
}
----------------------------
# 19 
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
short ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
short ReadMonth()
{
	short Month;
	cout << "enter a Month? ";
	cin >> Month;
	return Month;
}
short ReadYear()
{
	short Year;
	cout << "enter a Year? ";
	cin >> Year;
	return Year;
}
bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}
bool IsDate1BeforeDate2(stDate Date1, stDate Date2)
{
	return (Date1.Year < Date2.Year) ? true : ((Date1.Year ==Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month ==Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}
short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month>12)
		return 0;

	int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) :

		days[Month - 1];
}
bool IsLastDayInMonth(stDate Date)
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month,Date.Year));
}
bool IsLastMonthInYear(short Month)
{
	return (Month == 12);
}
stDate IncreaseDateByOneDay(stDate Date)
{
	if (IsLastDayInMonth(Date))
	{
		if (IsLastMonthInYear(Date.Month))
		{
			Date.Month = 1;
			Date.Day = 1;
			Date.Year++;
		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}
	return Date;
}
void SwapDates(stDate& Date1, stDate& Date2)
{
	stDate TempDate;
	TempDate.Year = Date1.Year;
	TempDate.Month = Date1.Month;
	TempDate.Day = Date1.Day;
	Date1.Year = Date2.Year;
	Date1.Month = Date2.Month;
	Date1.Day = Date2.Day;
	Date2.Year = TempDate.Year;
	Date2.Month = TempDate.Month;
	Date2.Day = TempDate.Day;
}
int GetDifferenceInDays(stDate Date1, stDate Date2, bool IncludeEndDay = false)
{
	int Days = 0;
	short SawpFlagValue = 1;
	if (!IsDate1BeforeDate2(Date1, Date2))
	{
		SwapDates(Date1, Date2);
		SawpFlagValue = -1;
	}
	while (IsDate1BeforeDate2(Date1, Date2))
	{
		Days++;
		Date1 = IncreaseDateByOneDay(Date1);
	}
	return IncludeEndDay ? ++Days * SawpFlagValue : Days *SawpFlagValue;
}

stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}
int main()
{
	stDate Date1 = ReadFullDate();
	stDate Date2 = ReadFullDate();

	cout << "\nDiffrence is: "<< GetDifferenceInDays(Date1, Date2) << " Day";

	cout << "\nDiffrence (Including End Day) is: "<< GetDifferenceInDays(Date1, Date2, true) << " Day";

	return 0;
}
----------------------------------------
#20
#include <iostream>
using namespace std;
struct stDate
{
	short Year;
	short Month;
	short Day;
};
short ReadDay()
{
	short Day;
	cout << "enter a Day ";
	cin >> Day;
	return Day;
}
short ReadMonth()
{
	short Month;
	cout << "enter a Month? ";
	cin >> Month;
	return Month;
}
short ReadYear()
{
	short Year;
	cout << "enter a Year ";
	cin >> Year;
	return Year;
}
stDate ReadFullDate()
{
	stDate Date;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return Date;
}
bool isLeapYear(short Year)
{
	return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}
short NumberOfDaysInAMonth(short Month, short Year)
{
	if (Month < 1 || Month>12)
		return 0;

	int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) :

		days[Month - 1];
}
bool IsLastDayInMonth(stDate Date)
{
	return (Date.Day == NumberOfDaysInAMonth(Date.Month,Date.Year));
}
bool IsLastMonthInYear(short Month)
{
	return (Month == 12);
}
stDate IncreaseDateByOneDay(stDate Date)
{
	if (IsLastDayInMonth(Date))
	{
		if (IsLastMonthInYear(Date.Month))
		{
			Date.Month = 1;
			Date.Day = 1;
			Date.Year++;
		}
		else
		{
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}
	return Date;
}
stDate IncreaseDateByOneWeek(stDate Date)
{
	for (int i = 1; i <= 7; i++)
	{
		Date = IncreaseDateByOneDay(Date);
	}
	return Date;
}
stDate IncreaseDateByXWeeks(short Weeks, stDate Date)
{
	for (short i = 1; i <= Weeks; i++)
	{
		Date = IncreaseDateByOneWeek(Date);
	}
	return Date;
}
stDate IncreaseDateByOneMonth(stDate Date)
{
	if (Date.Month == 12)
	{
		Date.Month = 1;
		Date.Year++;
	}
	else
	{
		Date.Month++;
	}
	short NumberOfDaysInCurrentMonth =NumberOfDaysInAMonth(Date.Month, Date.Year);

	if (Date.Day > NumberOfDaysInCurrentMonth)
	{
		Date.Day = NumberOfDaysInCurrentMonth;
	}
	return Date;
}
stDate IncreaseDateByXDays(short Days, stDate Date)
{
	for (short i = 1; i <= Days; i++)
	{
		Date = IncreaseDateByOneDay(Date);
	}
	return Date;
}
stDate IncreaseDateByXMonths(short Months, stDate Date)
{
	for (short i = 1; i <= Months; i++)
	{
		Date = IncreaseDateByOneMonth(Date);
	}
	return Date;
}
stDate IncreaseDateByOneYear(stDate Date)
{
	Date.Year++;
	return Date;
}
stDate IncreaseDateByXYears(short Years, stDate Date)
{
	for (short i = 1; i <= Years; i++)
	{
		Date = IncreaseDateByOneYear(Date);
	}
	return Date;
}
stDate IncreaseDateByXYearsFaster(short Years, stDate Date)
{
	Date.Year += Years;
	return Date;
}
stDate IncreaseDateByOneDecade(stDate Date)
{
	Date.Year += 10;
	return Date;
}
stDate IncreaseDateByXDecades(short Decade, stDate Date)
{
	for (short i = 1; i <= Decade * 10; i++)
	{
		Date = IncreaseDateByOneYear(Date);
	}
	return Date;
}
stDate IncreaseDateByXDecadesFaster(short Decade, stDate Date)
{
	Date.Year += Decade * 10;
	return Date;
}
stDate IncreaseDateByOneCentury(stDate Date)
{
	Date.Year += 100;
	return Date;
}
stDate IncreaseDateByOneMillennium(stDate Date)
{
	Date.Year += 1000;
	return Date;
}

int main()
{
	stDate Date1 = ReadFullDate();

	cout << "\nDate After: \n";
	
	Date1 = IncreaseDateByOneDay(Date1);
	cout << "\n01-Adding one day is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByXDays(10, Date1);
	cout << "\n02-Adding 10 days is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByOneWeek(Date1);
	cout << "\n03-Adding one week is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByXWeeks(10, Date1);
	cout << "\n04-Adding 10 weeks is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByOneMonth(Date1);
	cout << "\n05-Adding one month is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByXMonths(5, Date1);
	cout << "\n06-Adding 5 months is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByOneYear(Date1);
	cout << "\n07-Adding one year is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByXYears(10, Date1);
	cout << "\n08-Adding 10 Years is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByXYearsFaster(10, Date1);
	cout << "\n09-Adding 10 Years (faster) is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByOneDecade(Date1);
	cout << "\n10-Adding one Decade is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByXDecades(10, Date1);
	cout << "\n11-Adding 10 Decades is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByXDecadesFaster(10, Date1);
	cout << "\n12-Adding 10 Decade (faster) is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;
	
	Date1 = IncreaseDateByOneCentury(Date1);
	cout << "\n13-Adding One Century is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;

	Date1 = IncreaseDateByOneMillennium(Date1);
	cout << "\n14-Adding One Millennium is: "<< Date1.Day << "/" << Date1.Month << "/" << Date1.Year;


	return 0;
}
