#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <iomanip>

using namespace std;

struct stuser
{
	string username;
	string pass;
	int permissions;
	bool markfordelet = false;

};

struct sClients
{
	string AccountNumber;
	string PinCode;
	string Name;
	string Phone;
	double AccountBalance;
	bool MarkForDelete = false;


};

enum enTransactionsMenueOptions
{
	eDeposit = 1, eWithdraw = 2,eShowTotalBalance = 3, eShowMainMenue = 4
};

enum enManageUserMenueOpetions
{
	eListUsers = 1, eAddNewUser = 2, eDeleteUser = 3,eUpdateUser = 4, eFindUser = 5, eMainMenue = 6
};

enum enMainMenueOptions
{
	eListClients = 1, eAddNewClient = 2, eDeleteClient = 3, eUpdateClient = 4, eFindClient = 5, eShowTransactionsMenue = 6, eManageUsers = 7, eExit = 8
};

enum enMainMenuePermissions
{
	eAll = -1, pListClients = 1, pAddNewClient = 2, pDeleteClient= 4,pUpdateClients = 8, pFindClient = 16, pTranactions = 32,pManageUsers = 64
};

const string ClientFilName = "client.txt";
const string UserFilName = "User.txt";

vector<string> SplitString(string s1, string delim) {

	vector <string> vstring;

	int pos = 0;

	string sword;

	while ((pos = s1.find(delim)) != std::string::npos)
	{
		sword = s1.substr(0, pos);
		if (sword != "") 
		{
			vstring.push_back(sword);
		}
		s1.erase(0, pos + delim.length());
	}
	if (s1 != "") {
		vstring.push_back(s1);

	}
	return vstring;


}

stuser ConvertUserLinetoRecord(string Line, string Seperator ="#//#")
{
	stuser User;
	vector<string> vUserData;

	vUserData = SplitString(Line, Seperator);
	User.username = vUserData[0];
	User.pass = vUserData[1];
	User.permissions = stoi(vUserData[2]);

	return User;

}

sClients ConvertLinetoRecord(string Line, string Seperator ="#//#")
{
	sClients Client;
	vector<string> vClientData;

	vClientData = SplitString(Line, Seperator);

	Client.AccountNumber = vClientData[0];
	Client.PinCode = vClientData[1];
	Client.Name = vClientData[2];
	Client.Phone = vClientData[3];
	Client.AccountBalance = stod(vClientData[4]);
	
		return Client;
}

stuser ConvertUserLinetoRecord2(string Line, string Seperator ="#//#")
{
	stuser User;
	vector<string> vUserData;

	vUserData = SplitString(Line, Seperator);
	User.username = vUserData[0];
	User.pass = vUserData[1];
	User.permissions = stoi(vUserData[2]);

	return User;
}

string ConvertRecordToLine(sClients Client, string Seperator ="#//#")
{
	string ClientRecord = "";

	ClientRecord += Client.AccountNumber + Seperator;
	ClientRecord += Client.PinCode + Seperator;
	ClientRecord += Client.Name + Seperator;
	ClientRecord += Client.Phone + Seperator;
	ClientRecord += to_string(Client.AccountBalance);

	return ClientRecord;
}

string ConvertUserRecordToLine(stuser User, string Seperator ="#//#")
{
	string ClientRecord = "";
	ClientRecord += User.username + Seperator;
	ClientRecord += User.pass + Seperator;
	ClientRecord += to_string(User.permissions);

	return ClientRecord;
}

bool UserExistsByUsername(string Username, string FileName)
{
	fstream MyFile;
	MyFile.open(FileName, ios::in);
	if (MyFile.is_open())
	{
		string Line;
		stuser User;
		while (getline(MyFile, Line))
		{
			User = ConvertUserLinetoRecord(Line);
			if (User.username == Username)
			{
				MyFile.close();
				return true;
			}
		}
		MyFile.close();
	}
	return false;
}

bool ClientExistsByAccountNumber(string AccountNumber, string FileName)
{
	vector <sClients> vClients;

	fstream MyFile;

	MyFile.open(FileName, ios::in);
	if (MyFile.is_open())
	{
		string Line;
		sClients Client;

		while (getline(MyFile, Line))
		{
			Client = ConvertLinetoRecord(Line);

			if (Client.AccountNumber == AccountNumber)
			{
				MyFile.close();
				return true;
			}
			vClients.push_back(Client);
		}
		MyFile.close();
	}
	
	return false;
}

sClients ReadNewClient()
{
	sClients Client;
	cout << "Enter Account Number? ";
	getline(cin >> ws, Client.AccountNumber);
	while (ClientExistsByAccountNumber(Client.AccountNumber, ClientFilName))
	{
		cout << "\nClient with [" << Client.AccountNumber << "]already exists, Enter another Account Number  ";

			getline(cin >> ws, Client.AccountNumber);
	}

	cout << "Enter PinCode ";
	getline(cin, Client.PinCode);
	cout << "Enter Name ";
	getline(cin, Client.Name);
	cout << "Enter Phone ";
	getline(cin, Client.Phone);
	cout << "Enter AccountBalanc? ";
	cin >> Client.AccountBalance;


	return Client;
}

int ReadPermissionsToSet()
{
	int Permissions = 0;

	char Answer = 'n';

	cout << "\nDo you want to give full access y/n ";
	cin >> Answer;
	if (Answer == 'y' || Answer == 'Y')
	{
		return -1;
	}
	cout << "\nDo you want to give access to : \n ";

	cout << "\nShow Client List? y/n ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		Permissions += enMainMenuePermissions::pListClients;
	}

	cout << "\nAdd New Client? y/n ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		Permissions += enMainMenuePermissions::pAddNewClient;
	}

	cout << "\nDelete Client? y/n ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		Permissions += enMainMenuePermissions::pDeleteClient;
	}

	cout << "\nUpdate Client? y/n ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		Permissions += enMainMenuePermissions::pUpdateClients;
	}

	cout << "\nFind Client? y/n ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		Permissions += enMainMenuePermissions::pFindClient;
	}

	cout << "\nTransactions? y/n ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		Permissions += enMainMenuePermissions::pTranactions;
	}

	cout << "\nManage Users? y/n ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		Permissions += enMainMenuePermissions::pManageUsers;
	}
	return Permissions;
}

stuser ReadNewUser() {

	stuser User;

	cout << "Enter UserName ";
	getline(cin >> ws, User.username);

	while (UserExistsByUsername(User.username, UserFilName))
	{
		cout << "\nUser with [" << User.username << "] alreadyexists, Enter another Username  ";
        
		getline(cin >> ws, User.username);
	}
	cout << "Enter Password? ";

	getline(cin, User.pass);

	User.permissions = ReadPermissionsToSet();

	return User;
}

vector<sClients> LoadClinetDataFromFile(string filname){

	vector<sClients> vClinet;

	fstream MyFile;
	MyFile.open(filname, ios::in);

	if (MyFile.is_open())
	{
		string Line;
		sClients Clinet;

		while (getline(MyFile, Line))
		{
			Clinet = ConvertLinetoRecord(Line);

			vClinet.push_back(Clinet);
		}

		MyFile.close();

	}
	return vClinet;
}

vector<stuser>LoadUsersDataFromFile(string filname) {

	vector<stuser> vUser;

	fstream MyFile;

	MyFile.open(filname, ios::in);

	if (MyFile.is_open())
	{
		string Line;
		stuser User;

		while (getline(MyFile, Line))
		{
			User = ConvertUserLinetoRecord(Line);
			vUser.push_back(User);
		}

		MyFile.close();

	}
	return vUser;
}

void GoBackToMainMenue() {}


void ShowAddNewClientsScreen() {

	if(!CheckAccessPermission(enMainMenuePermissions::pUpdateClients))
	{
		ShowAccessDeniedMessage();
		return;
	}
	cout << "\n-----------------------------------\n";
	cout << "\tAdd New Clients Screen";
	cout << "\n-----------------------------------\n";

	AddNewClients();
}

void ShowUpdateClientScreen() {

	if(!CheckAccessPermission(enMainMenuePermissions::pUpdateClients))
	{
		ShowAccessDeniedMessage();

		return;
	}
	cout << "\n-----------------------------------\n";
	cout << "\tUpdate Client Info Screen";
	cout << "\n-----------------------------------\n";

	vector <sClients> vClients = LoadClinetDataFromFile(ClientFilName);

	string AccountNumber = ReadClientAccountNumber();

	UpdateClientByAccountNumber(AccountNumber, vClients);

}

void ShowDeleteClientScreen(){

	if(!CheckAccessPermission(enMainMenuePermissions::pDeleteClient))
	{
		ShowAccessDeniedMessage();
		return;
	}

	cout << "\n-----------------------------------\n";
	cout << "\tDelete Client Screen";
	cout << "\n-----------------------------------\n";

	vector <sClients> vClients = LoadClinetDataFromFile(ClientFilName);

	string AccountNumber = ReadClientAccountNumber();

	DeleteClientByAccountNumber(AccountNumber, vClients);
}

void ShowFindClientScreen() {

	if(!CheckAccessPermission(enMainMenuePermissions::pFindClient))
	{
		ShowAccessDeniedMessage();
		return;
	}
	cout << "\n-----------------------------------\n";
	cout << "\tFind Client Screen";
	cout << "\n-----------------------------------\n";

	vector <sClients> vClients = LoadClinetDataFromFile(ClientFilName);
	
	sClients Client;
	
	string AccountNumber = ReadClientAccountNumber();
	
	if (FindClientByAccountNumber(AccountNumber, vClients,Client))

		PrintClientCard(Client);
	else
		cout << "\nClient with Account Number[" << AccountNumber<< "] is not found";
}

stuser CurrentUser;
	
void ShowMainMenue();
void ShowTransactionsMenue();
void ShowManageUsersMenue();
bool CheckAccessPermission(enMainMenuePermissions Permission);
void Login();

void PrintClientRecordBalanceLine(sClients Client){
	cout << "| " << setw(15) << left << Client.AccountNumber;
	cout << "| " << setw(40) << left << Client.Name;
	cout << "| " << setw(12) << left << Client.AccountBalance;
}

void PrintClientRecordLine(sClients Client)
{
	cout << "| " << setw(15) << left << Client.AccountNumber;
	cout << "| " << setw(10) << left << Client.PinCode;
	cout << "| " << setw(40) << left << Client.Name;
	cout << "| " << setw(12) << left << Client.Phone;
	cout << "| " << setw(12) << left << Client.AccountBalance;
}

void PrintClientRecordBalanceLine(sClients Client)
{
	cout << "| " << setw(15) << left << Client.AccountNumber;
	cout << "| " << setw(40) << left << Client.Name;
	cout << "| " << setw(12) << left << Client.AccountBalance;
}
void ShowAccessDeniedMessage()
{
	cout << "\n------------------------------------\n";
	cout << "Access Denied, \nYou dont Have Permission To Dothis, \nPlease Conact Your Admin";
	cout << "\n------------------------------------\n";
}

void ShowAllClientsScreen() {

	if
		(!CheckAccessPermission(enMainMenuePermissions::pListClients))
	{
		ShowAccessDeniedMessage();
		return;
	}
	vector <sClients> vClients = LoadClinetDataFromFile(ClientFilName);

	cout << "\n\t\t\t\t\tClient List (" << vClients.size() << ")Client";
	cout << "\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	cout << "| " << left << setw(15) << "Accout Number";
	cout << "| " << left << setw(10) << "Pin Code";
	cout << "| " << left << setw(40) << "Client Name";
	cout << "| " << left << setw(12) << "Phone";
	cout << "| " << left << setw(12) << "Balance";
	cout <<"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	if (vClients.size() == 0)
		cout << "\t\t\t\tNo Clients Available In the System!";
	else
		for (sClients Client : vClients)
		{
			PrintClientRecordLine(Client);
			cout << endl;
		}
	cout << "\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
}

void PrintUserRecordLine(stuser User)
{
	cout << "| " << setw(15) << left << User.username;
	cout << "| " << setw(10) << left << User.pass;
	cout << "| " << setw(40) << left << User.permissions;
}

void ShowAllUsersSecreen(){

	vector <stuser> vUsers = LoadUsersDataFromFile(UserFilName);

	cout << "\n\t\t\t\t\tUsers List (" << vUsers.size() << ")User";
	
	cout <<"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	cout << "| " << left << setw(15) << "User Name";
	cout << "| " << left << setw(10) << "Password";
	cout << "| " << left << setw(40) << "Permissions";
	cout <<"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;

	if (vUsers.size() == 0)
		cout << "\t\t\t\tNo Users Available In the System!";
	else
		for (stuser User : vUsers)
		{
			PrintUserRecordLine(User);
			cout << endl;
		}
	cout <<"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
}

void ShowTotalBalances()
{
	vector <sClients> vClients = LoadClinetDataFromFile(ClientFilName);

	cout << "\n\t\t\t\t\tBalances List (" << vClients.size() << ")Client";
	cout <<"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	cout << "| " << left << setw(15) << "Accout Number";
	cout << "| " << left << setw(40) << "Client Name";
	cout << "| " << left << setw(12) << "Balance";
	cout <<"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	double TotalBalances = 0;
	if (vClients.size() == 0)
		cout << "\t\t\t\tNo Clients Available In the System!";
	else
		for (sClients Client : vClients)
		{
			PrintClientRecordBalanceLine(Client);
			TotalBalances += Client.AccountBalance;
			cout << endl;
		}
	cout <<"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	cout << "\t\t\t\t\t Total Balances = " << TotalBalances;
}

void PrintClientCard(sClients Client)
{
	cout << "\nThe following are the client details:\n";
	cout << "-----------------------------------";
	cout << "\nAccout Number: " << Client.AccountNumber;
	cout << "\nPin Code : " << Client.PinCode;
	cout << "\nName : " << Client.Name;
	cout << "\nPhone : " << Client.Phone;
	cout << "\nAccount Balance: " << Client.AccountBalance;
	cout << "\n-----------------------------------\n";
}

void PrintUserCard(stuser User)
{
	cout << "\nThe following are the user details:\n";
	cout << "-----------------------------------";
	cout << "\nUsername : " << User.username;
	cout << "\nPassword : " << User.pass;
	cout << "\nPermissions : " << User.permissions;
	cout << "\n-----------------------------------\n";
}

bool FindClientByAccountNumber(string AccountNumber, vector<sClients> vClients, sClients& Client)
{
	for (sClients C : vClients)
	{
		if (C.AccountNumber == AccountNumber)
		{
			Client = C;
			return true;
		}
	}
	return false;
}

bool FindUserByUsername(string Username, vector <stuser> vUsers,stuser& User)
{
	for (stuser U : vUsers)
	{
		if (U.username == Username)
		{
			User = U;
			return true;
		}
	}
	return false;
}

bool FindUserByUsernameAndPassword(string Username, string Password, stuser& User)
{
	vector <stuser> vUsers = LoadUsersDataFromFile(UserFilName);
	for (stuser U : vUsers)
	{
		if (U.username == Username && U.pass == Password)
		{
			User = U;
			return true;
		}
	}
	return false;
}

sClients ChangeClientRecord(string AccountNumber)
{
	sClients Client;
	Client.AccountNumber = AccountNumber;

	cout << "\n\nEnter PinCode ";
	getline(cin >> ws, Client.PinCode);
	
	cout << "Enter Name ";
	getline(cin, Client.Name);
	
	cout << "Enter Phone ";
	getline(cin, Client.Phone);
	
	cout << "Enter AccountBalance ";
	cin >> Client.AccountBalance;


	return Client;
}

stuser ChangeUserRecord(string Username)
{
	stuser User;
	User.username = Username;
	cout << "\n\nEnter Password ";

	getline(cin >> ws, User.pass);
	User.permissions = ReadPermissionsToSet();

	return User;
}

bool MarkClientForDeleteByAccountNumber(string AccountNumber,vector <sClients>& vClients){
	for (sClients& C : vClients)
	{
		if (C.AccountNumber == AccountNumber)
		{
			C.MarkForDelete = true;
			return true;
		}
	}
	return false;
}

bool MarkUserForDeleteByUsername(string Username, vector <stuser>&vUsers){
	for (stuser& U : vUsers)
	{
		if (U.username == Username)
		{
			U.markfordelet = true;
			return true;
		}
	}
	return false;
}

vector <sClients> SaveCleintsDataToFile(string FileName, vector<sClients> vClients){
	fstream MyFile;

	MyFile.open(FileName, ios::out);
	string DataLine;

	if (MyFile.is_open()){
		for (sClients C : vClients){
			if (C.MarkForDelete == false)
			{
				DataLine = ConvertRecordToLine(C);
				MyFile << DataLine << endl;
			}
		}

		MyFile.close();
	}

	return vClients;
}

vector <stuser> SaveUsersDataToFile(string FileName, vector<stuser> vUsers){
	fstream MyFile;
	MyFile.open(FileName, ios::out);

	string DataLine;
	if (MyFile.is_open()){
		for (stuser U : vUsers){
			if (U.markfordelet == false)
			{
			DataLine = ConvertUserRecordToLine(U);
			MyFile << DataLine << endl;
			}
		}

		MyFile.close();
	}

	return vUsers;
}


void AddDataLineToFile(string FileName, string stDataLine){
	fstream MyFile;

	MyFile.open(FileName, ios::out | ios::app);
	if (MyFile.is_open())
	{
		MyFile << stDataLine << endl;
		MyFile.close();
	}
}

void AddNewClient()
{
	sClients Client;

	Client = ReadNewClient();
	AddDataLineToFile(ClientFilName,ConvertRecordToLine(Client));
}

void AddNewUser()
{
	stuser User;

	User = ReadNewUser();
	AddDataLineToFile(UserFilName,ConvertUserRecordToLine(User));
}

void AddNewClients()
{
	char AddMore = 'Y';
	do
	{
		cout << "Adding New Client:\n\n";
		AddNewClient();

		cout << "\nClient Added Successfully, do you want to addmore clients  Y / N  ";
		cin >> AddMore;

	} while (toupper(AddMore) == 'Y');
}

void AddNewUsers()
{
	char AddMore = 'Y';
	do
	{
		cout << "Adding New User:\n\n";
		AddNewUser();

		cout << "\nUser Added Successfully, do you want to addmore Users  Y / N  ";
		cin >> AddMore;

	} while (toupper(AddMore) == 'Y');
}

bool DeleteClientByAccountNumber(string AccountNumber, vector<sClients>& vClients){
	sClients Client;
	char Answer = 'n';
	if (FindClientByAccountNumber(AccountNumber, vClients,Client))
	{
		PrintClientCard(Client);
		cout << "\n\nAre you sure you want delete this client y/n ";
		cin >> Answer;
		if (Answer == 'y' || Answer == 'Y')
		{
			MarkClientForDeleteByAccountNumber(AccountNumber,vClients);
			SaveCleintsDataToFile(ClientFilName, vClients);
			vClients = LoadClinetDataFromFile(ClientFilName);

			cout << "\n\nClient Deleted Successfully";

			return true;
		}
	}
	else
	{
		cout << "\nClient with Account Number (" << AccountNumber<< ") is Not Found";
		
		return false;

	}
}

bool DeleteUserByUsername(string Username, vector <stuser>&vUsers){
	if (Username == "Admin")
	{
		cout << "\n\nYou cannot Delete This User.";
		return false;
	}

	stuser User;
	char Answer = 'n';

	if (FindUserByUsername(Username, vUsers, User))
	{
		PrintUserCard(User);
		cout << "\n\nAre you sure you want delete this User? y/n  ";
		cin >> Answer;

		if (Answer == 'y' || Answer == 'Y')
		{
			MarkUserForDeleteByUsername(Username, vUsers);

			SaveUsersDataToFile(UserFilName, vUsers);

			vUsers = LoadUsersDataFromFile(UserFilName);

			cout << "\n\nUser Deleted Successfull";

			return true;
		}
	}
	else
	{
		cout << "\nUser with Username (" << Username << ") is NotFound";
			return false;
	}
}

bool UpdateClientByAccountNumber(string AccountNumber, vector<sClients>& vClients)
{
	sClients Client;

	char Answer = 'n';

	if (FindClientByAccountNumber(AccountNumber, vClients,
		Client))
	{
		PrintClientCard(Client);

		cout << "\n\nAre you sure you want update this client y/n ";
		cin >> Answer;

		if (Answer == 'y' || Answer == 'Y')
		{
			for (sClients& C : vClients)
			{
				if (C.AccountNumber == AccountNumber)
				{
					C = ChangeClientRecord(AccountNumber);
					break;
				}
			}

			SaveCleintsDataToFile(ClientFilName, vClients);
			cout << "\n\nClient Updated Successfully.";

			return true;
		}
	}
	else
	{
		cout << "\nClient with Account Number (" << AccountNumber<< ") is Not Found";
		return false;
	}
}

bool UpdateUserByUsername(string Username, vector <stuser>&vUsers){
	stuser User;
	char Answer = 'n';

	if (FindUserByUsername(Username, vUsers, User))
	{
		PrintUserCard(User);
		cout << "\n\nAre you sure you want update this User? y/n ";
		cin >> Answer;
		if (Answer == 'y' || Answer == 'Y')
		{
			for (stuser& U : vUsers)
			{
				if (U.username == Username)
				{
					U = ChangeUserRecord(Username);
					break;
				}
			}
			SaveUsersDataToFile(UserFilName, vUsers);

			cout << "\n\nUser Updated Successfully.";
			
			return true;
		}
	}
	else
	{
		cout << "\nUser with Account Number (" << Username << ")is Not Found";
			
		return false;
	}
}

bool DepositBalanceToClientByAccountNumber(string AccountNumber,double Amount, vector <sClients>& vClients)
{
	char Answer = 'n';

	cout << "\n\nAre you sure you want perfrom this transaction y / n  ";
	cin >> Answer;

	if (Answer == 'y' || Answer == 'Y')
	{
		for (sClients& C : vClients)
		{
			if (C.AccountNumber == AccountNumber)
			{
				C.AccountBalance += Amount;

				SaveCleintsDataToFile(ClientFilName, vClients);

				cout << "\n\nDone Successfully. New balance is: "<< C.AccountBalance;


				return true;
			}
		}
		return false;
	}
}

string ReadClientAccountNumber()
{
	string AccountNumber = "";

	cout << "\nPlease enter AccountNumber ";
	cin >> AccountNumber;


	return AccountNumber;
}

string ReadUserName()
{
	string Username = "";

	cout << "\nPlease enter Username? ";
	cin >> Username;


	return Username;
}

void ShowLisrUsersScreen() {

	ShowAllUsersSecreen();
}

void ShowAddNewUserScreen() {

	cout << "\n-----------------------------------\n";
	cout << "\tAdd New User Screen";
	cout << "\n-----------------------------------\n";
	AddNewUsers();
}

void ShowDeleteUserScreen() {

	cout << "\n-----------------------------------\n";
	cout << "\tDelete Users Screen";
	cout << "\n-----------------------------------\n";

	vector <stuser> vUsers = LoadUsersDataFromFile(UserFilName);
	string Username = ReadUserName();

	DeleteUserByUsername(Username, vUsers);
}

void ShowUpdateUserScreen() {

	cout << "\n-----------------------------------\n";
	cout << "\tUpdate Users Screen";
	cout << "\n-----------------------------------\n";

	vector <stuser> vUsers = LoadUsersDataFromFile(UserFilName);
	string Username = ReadUserName();
	UpdateUserByUsername(Username, vUsers);
}

void ShowFindUserScreen() {

	cout << "\n-----------------------------------\n";
	cout << "\tFind User Screen";
	cout << "\n-----------------------------------\n";

	vector <stuser> vUsers = LoadUsersDataFromFile(UserFilName);
	stuser User;

	string Username = ReadUserName();

	if (FindUserByUsername(Username, vUsers, User))

		PrintUserCard(User);
	else
		cout << "\nUser with Username [" << Username << "] is notfound";
}

void ShowEndScreen()
{
	cout << "\n-----------------------------------\n";
	cout << "\tProgram Ends :-)";
	cout << "\n-----------------------------------\n";
}

void ShowDepositScreen()
{
	cout << "\n-----------------------------------\n";
	cout << "\tDeposit Screen";
	cout << "\n-----------------------------------\n";
	
	sClients Client;

	vector <sClients> vClients =LoadClinetDataFromFile(ClientFilName);

	string AccountNumber = ReadClientAccountNumber();

	while (!FindClientByAccountNumber(AccountNumber, vClients,Client))
	{
		cout << "\nClient with [" << AccountNumber << "] does not exist\n";
		
		AccountNumber = ReadClientAccountNumber();
	}

	PrintClientCard(Client);

	double Amount = 0;

	cout << "\nPlease enter deposit amount? ";
	cin >> Amount;

	DepositBalanceToClientByAccountNumber(AccountNumber, Amount,vClients);
}

void ShowWithDrawScreen()
{
	cout << "\n-----------------------------------\n";
	cout << "\tWithdraw Screen";
	cout << "\n-----------------------------------\n";

	sClients Client;

	vector <sClients> vClients = LoadClinetDataFromFile(ClientFilName);

	string AccountNumber = ReadClientAccountNumber();

	while (!FindClientByAccountNumber(AccountNumber, vClients,Client))
	{
		cout << "\nClient with [" << AccountNumber << "] does not exist\n";
		
		AccountNumber = ReadClientAccountNumber();
	}
	PrintClientCard(Client);
	double Amount = 0;

	cout << "\nPlease enter withdraw amount? ";
	cin >> Amount;

	while (Amount > Client.AccountBalance)
	{
		cout << "\nAmount Exceeds the balance, you can withdraw up to : " << Client.AccountBalance << endl;
		
		cout << "Please enter another amount? ";
		cin >> Amount;
	}
	DepositBalanceToClientByAccountNumber(AccountNumber, Amount *-1, vClients);
}

void ShowTotalBalancesScreen()
{
	ShowTotalBalances();
}

bool CheckAccessPermission(enMainMenuePermissions Permission)
{
	if (CurrentUser.permissions == enMainMenuePermissions::eAll)
		return true;

	if ((Permission & CurrentUser.permissions) == Permission)
		return true;

	else {
		return false;
	}
}

void GoBackToMainMenue()
{
	cout << "\n\nPress any key to go back to Main Menue...";

	system("pause>0");

	ShowMainMenue();
}

void GoBackToTransactionsMenue()
{
	cout << "\n\nPress any key to go back to Transactions Menue...";

	system("pause>0");
	ShowTransactionsMenue();
}

void GoBackToManageUserMenue() {

	cout << "\n\nPress any key to go back to TransactionsMenue...";
		system("pause>0");
		ShowManageUsersMenue();
}

int ReadTransactionsMenueOption()
{
	cout << "Choose what do u want to do [1 to 4] ";
	int Chose = 0;
	cin >> Chose;

	return Chose;
}

int  ReadManageUsersMenueOption(){

	cout << "Choose what do u Want to do [1 to 6]";
	int chos;
	cin >> chos;

	return chos;
}

void PerfromTranactionsMenueOption(enTransactionsMenueOptions TransactionMenueOption)
{
	switch (TransactionMenueOption)
	{
	case enTransactionsMenueOptions::eDeposit:
	{
		system("cls");
		ShowDepositScreen();
		GoBackToTransactionsMenue();
		break;
	}
	case enTransactionsMenueOptions::eWithdraw:
	{
		system("cls");
		ShowWithDrawScreen();
		GoBackToTransactionsMenue();
		break;
	}
	case enTransactionsMenueOptions::eShowTotalBalance:
	{
		system("cls");
		ShowTotalBalancesScreen();
		GoBackToTransactionsMenue();
		break;
	}
	case enTransactionsMenueOptions::eShowMainMenue:
	{
		ShowMainMenue();
	}
	}
}

void ShowTransactionsMenue() {

	if (!CheckAccessPermission(enMainMenuePermissions::pTranactions))
	{
		ShowAccessDeniedMessage();

		GoBackToMainMenue();

		return;
	}
	system("cls");
	cout << "===========================================\n";
	cout << "\t\tTransactions Menue Screen\n";
	cout << "===========================================\n";
	cout << "\t[1] Deposit.\n";
	cout << "\t[2] Withdraw.\n";
	cout << "\t[3] Total Balances.\n";
	cout << "\t[4] Main Menue.\n";
	cout << "===========================================\n";
	PerfromTranactionsMenueOption((enTransactionsMenueOptions)ReadTransactionsMenueOption());
}

void PerfromManageUsersMenueOption(enManageUserMenueOpetions MainMenueOptions) {
	
	switch (MainMenueOptions)
	{
	case enManageUserMenueOpetions::eListUsers:
	{
		system("cls");
		ShowLisrUsersScreen();
		GoBackToManageUserMenue();
		break;
	}
	case enManageUserMenueOpetions::eAddNewUser:
		system("cls");
		ShowAddNewUserScreen();
		GoBackToManageUserMenue();
		break;
	case enManageUserMenueOpetions::eDeleteUser:
		system("cls");
		ShowDeleteUserScreen();
		GoBackToManageUserMenue();
		break;
	case enManageUserMenueOpetions::eUpdateUser:
		system("cls");
		ShowUpdateUserScreen();
		GoBackToManageUserMenue();
		break;
	case enManageUserMenueOpetions::eFindUser:
		system("cls");
		ShowFindUserScreen();
		GoBackToManageUserMenue();
		break;
	case enManageUserMenueOpetions::eMainMenue:

	{
		ShowMainMenue();


	}

	}
}

void ShowManageUsersMenue(){

		if(!CheckAccessPermission(enMainMenuePermissions::pManageUsers))
		{
			ShowAccessDeniedMessage();

			GoBackToMainMenue();
			return;
		}
		system("cls");

		cout << "===========================================\n";
		cout << "\t\tManage Users Menue Screen\n";
		cout << "===========================================\n";
		cout << "\t[1] List Users.\n";
		cout << "\t[2] Add New User.\n";
		cout << "\t[3] Delete User.\n";
		cout << "\t[4] Update User.\n";
		cout << "\t[5] Find User.\n";
		cout << "\t[6] Main Menue.\n";
		cout << "===========================================\n";

		PerfromManageUsersMenueOption((enManageUserMenueOpetions)ReadManageUsersMenueOption());
}

int ReadMainMenueOption() {

	cout << "Choose what do u Want to do [1 to 8]";
	int chos;
	cin >> chos;

	return chos;

}

void PerfromMainMenueOption(enMainMenueOptions MainMenueOption) {
	

	switch (MainMenueOption)
	{
	case enMainMenueOptions::eListClients:
	{
		system("cls");
		ShowAllClientsScreen();
		GoBackToMainMenue();
		break;
	}
	case enMainMenueOptions::eAddNewClient:
		system("cls");
		ShowAddNewClientsScreen();
		GoBackToMainMenue();
		break;
	case enMainMenueOptions::eDeleteClient:
		system("cls");
		ShowDeleteClientScreen();
		GoBackToMainMenue();
		break;
	case enMainMenueOptions::eUpdateClient:
		system("cls");
		ShowUpdateClientScreen();
		GoBackToMainMenue();
		break;
	case enMainMenueOptions::eFindClient:
		system("cls");
		ShowFindClientScreen();
		GoBackToMainMenue();
		break;
	case enMainMenueOptions::eShowTransactionsMenue:
		system("cls");
		ShowTransactionsMenue();
		break;

	case enMainMenueOptions::eManageUsers:
		system("cls");
		ShowManageUsersMenue();
		break;
	case enMainMenueOptions::eExit:
		system("cls");
		Login();
		break;
	}
}

bool FindUsersByNameAndPass(string user, string pass, stuser& User) {

	vector<stuser> vUser = LoadUsersDataFromFile(UserFilName);
	for (stuser U : vUser)
	{
		if (U.username == user && U.pass == pass)
		{

			User = U;


			return true;
		}

	}
	return false;
}

void ShowMainMenue() {

	system("cls");
	cout << "===========================================\n";
	cout << "\t\tMain Menue Screen\n";
	cout << "===========================================\n";
	cout << "\t[1] Show Client List\n";
	cout << "\t[2] Add New Client\n";
	cout << "\t[3] Delete Client\n";
	cout << "\t[4] Update Client Info\n";
	cout << "\t[5] Find Client\n";
	cout << "\t[6] Transactions\n";
	cout << "\t[7] Manage Users\n";
	cout << "\t[8] Logout\n";
	cout << "===========================================\n";

	PerfromMainMenueOption((enMainMenueOptions)ReadMainMenueOption());
}


bool LoadUsersInfo(string user , string pass) {

	if (FindUsersByNameAndPass(user, pass, CurrentUser))

		return true;

	else
		return false;

	
}

void Login() {

	bool LoginFaild = false;

	string username, password;

	do
	{
		system("cls");
		cout << "\n----------------------------------\n";
		cout << "\tLogin Screen";
		cout << "\n----------------------------------\n";

		if (LoginFaild)
		{
			cout << "Invalid UserName / Password" << endl;

		}
		cout << "Enter UserName\n";
		cin >> LoginFaild;
		cout << "Enter Password\n";
		cin >> LoginFaild;

		LoginFaild = !LoadUsersInfo(username, password);


	} while (LoginFaild);

	ShowMainMenue();
}

int main()
{

	Login();

	return 0;
}
